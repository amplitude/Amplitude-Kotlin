apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

// Use Android's built-in source jar for libraries, create custom one for non-Android modules
if (!project.plugins.findPlugin("com.android.library")) {
    tasks.register('sourcesJar', Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

tasks.withType(dokkaHtmlPartial.getClass()).configureEach {
    pluginsMapConfiguration.set(
            ["org.jetbrains.dokka.base.DokkaBase": """{ "separateInheritedMembers": true}"""]
    )
}

tasks.register('javadocJar', Jar) {
    dependsOn dokkaJavadoc
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId PUBLISH_GROUP_ID
                version PUBLISH_VERSION

                artifactId PUBLISH_ARTIFACT_ID

                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                    // Android plugin automatically provides source jars
                } else {
                    from components.java
                    artifact tasks.sourcesJar
                }

                artifact tasks.javadocJar

                pom {
                    name = PUBLISH_NAME
                    description = PUBLISH_DESCRIPTION
                    url = POM_URL
                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution =  POM_LICENCE_DIST
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                        }
                    }
                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                        url = POM_SCM_URL
                    }
                }
            }
        }
    }
}

ext["signing.keyId"] = rootProject.ext["signing.keyId"]
ext["signing.password"] = rootProject.ext["signing.password"]
ext["signing.secretKeyRingFile"] = rootProject.ext["signing.secretKeyRingFile"]

signing {
    sign publishing.publications
}
